// üü¢ –£—Ç–∏–ª—ñ—Ç–Ω—ñ —Ç–∏–ø–∏ (Utility Types): Pick, Omit
// TypeScript –Ω–∞–¥–∞—î –≤–±—É–¥–æ–≤–∞–Ω—ñ —É—Ç–∏–ª—ñ—Ç–Ω—ñ —Ç–∏–ø–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∏–ø—ñ–≤.

// 1. Pick<Type, Keys>: –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Ç–∏–ø –∑ Type, –≤–∏–±–∏—Ä–∞—é—á–∏ –ª–∏—à–µ –≤–∫–∞–∑–∞–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ (Keys).
interface Product {
    id: string;
    name: string;
    price: number;
    description: string;
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–ø –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç—É, –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ª–∏—à–µ id, name, price
type ProductCardProps = Pick<Product, 'id' | 'name' | 'price'>;

const displayProduct: ProductCardProps = {
    id: "p123",
    name: "Laptop",
    price: 1200
};
// const displayProductError: ProductCardProps = { id: "p123", name: "Laptop", description: "..." }; // –ü–æ–º–∏–ª–∫–∞!

// 2. Omit<Type, Keys>: –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Ç–∏–ø –∑ Type, –≤–∏–∫–ª—é—á–∞—é—á–∏ –≤–∫–∞–∑–∞–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ (Keys).

interface UserDetails {
    id: string;
    username: string;
    email: string;
    passwordHash: string; // –¶–µ –ø–æ–ª–µ –º–∏ –Ω–µ —Ö–æ—á–µ–º–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É
    createdAt: Date;
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–ø –¥–ª—è API-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –¥–µ –Ω–µ –±—É–¥–µ passwordHash
type PublicUserDetails = Omit<UserDetails, 'passwordHash'>;

const publicUser: PublicUserDetails = {
    id: "u456",
    username: "john_doe",
    email: "john@example.com",
    createdAt: new Date()
};
// const publicUserError: PublicUserDetails = { ...publicUser, passwordHash: "abc" }; // –ü–æ–º–∏–ª–∫–∞!