// üü¢ –û–±'—î–∫—Ç–Ω—ñ —Ç–∏–ø–∏ (—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ —Ç–∞ –ø—Å–µ–≤–¥–æ–Ω—ñ–º–∏ —Ç–∏–ø—ñ–≤):
// –í—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ –º—ñ–∂ interface —Ç–∞ type (–∫–æ—Ä–æ—Ç–∫–æ):
// interface –º–æ–∂–µ –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–ª–∞—Å–∞–º–∏, type ‚Äì –Ω—ñ.
// interface –º–æ–∂–µ –±—É—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π (—Ä–æ–∑—à–∏—Ä—é—î —Å–µ–±–µ) —Ç–∞ –æ–±'—î–¥–Ω–∞–Ω–∏–π (declaration merging), type ‚Äì –Ω—ñ.
// type –º–æ–∂–µ –æ–ø–∏—Å—É–≤–∞—Ç–∏ –æ–±'—î–¥–Ω–∞–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ—Ç–∏–Ω–∏ —Ç–∏–ø—ñ–≤.

// interface: –û–ø–∏—Å—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±'—î–∫—Ç–∞. –ß–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–±'—î–∫—Ç—ñ–≤ —Ç–∞ –∫–ª–∞—Å—ñ–≤.
interface User {
    id: number;
    name: string;
    email?: string; // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ –ø–æ–ª–µ
    readonly age: number; // –¢—ñ–ª—å–∫–∏ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è
}

const user1: User = { id: 1, name: "David", age: 25 };
// user1.age = 26; // –ü–æ–º–∏–ª–∫–∞, age —î readonly

// type: –ú–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø—Å–µ–≤–¥–æ–Ω—ñ–º–∏ –¥–ª—è –±—É–¥—å-—è–∫–∏—Ö —Ç–∏–ø—ñ–≤ (–ø—Ä–∏–º—ñ—Ç–∏–≤—ñ–≤, –æ–±'—î–∫—Ç—ñ–≤, –æ–±'—î–¥–Ω–∞–Ω—å).
type UserID = string | number; // –û–±'—î–¥–Ω–∞–Ω–Ω—è —Ç–∏–ø—ñ–≤ (union type)
let userId: UserID = "abc-123";
userId = 123;

type Point = {
    x: number;
    y: number;
};

const origin: Point = { x: 0, y: 0 };